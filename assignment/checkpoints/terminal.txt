# Type your responses on a new line

# 1 - What is the command for listing the files in the current folder (directory)?
Answer: "ls", which stands for "list".  It'll show all files (and folders) in the current directory.  

# 2 - What is the command for changing directories?
Answer: "cd", which stands for "change directory" (shocking).  You can use it to skip to just one folder, or if you type out the file path, can go to subfolders as well.  

# 3 - What is the command for going "up" a folder (to a parent directory)?
Answer: "cd ..", which will move you up a folder.  

# 4 - What is a quick way to create a new folder?
Answer: "mkdir", which stands for "make directory".  It'll create a new directory (aka folder) in the current directory.  

# 5 - What output would you expect when you run the command 'ls' in an empty folder? What about a folder containing files?
Answer 1: Running "ls" in an empty folder would return nothing, not even a blank line,  meaning it's empty.  It'll just give you the blank prompt.  
Answer 2: Running "ls" in a folder containing files would list each of the files. 

# 6 - What is a quick way to create a new file?
Answer: "touch" is the command that would let you quickly create a file.  Bonus, you can also specify what type of file it'll be with the file extension (e.g., .pdf or .txt). 

# 7 - Run 'git --version' in your terminal. What is the output?
Answer: "git version 2.31.0" 

# 8 - Why would you run the command 'git status'?
Answer: Running the command "git status" would display the working directory and the staging area.  Basically you can then see what changes are being staged vs what are not for the files being tracked by git.  

# 9 - What does the command 'git add .' do?
Answer: Running the command "git add ." would add the entire working directory, and all changes made to it, to the staging area.  This would set you up to be ready for a commit.

# 10 - What is the command to push your committed changes to your repo on GitHub?
Answer: The command to push your committed changes to your repo are "git push -u origin master", assuming that we've already done a "git commit" with an appropriately tagged message.  
